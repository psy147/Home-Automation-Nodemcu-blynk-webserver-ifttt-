#include<ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>



#define BLYNK_PRINT Serial
#define ssid "****"
#define pass "****"
char auth[] = "*****";

WiFiServer server(80);
const int output0 = D3;
const int output1 = D5;
const int output2 = D4;
const int output3 = D6;

String output0State = "off";
String output1State = "off";
String output2State = "off";
String output3State = "off";

String header; //variable used to store a http request
String onstate="off";   //variables used to store the output state of led
String offstate="off";
void setup()
{
  Serial.begin(115200);
  
  
  //initialize the gpio pins
  pinMode(D3,OUTPUT);
  pinMode(D4,OUTPUT);
  pinMode(D5,OUTPUT);
  pinMode(D6,OUTPUT);
  //set output to low inititally
  digitalWrite(D3,LOW);
  digitalWrite(D4,LOW);
  digitalWrite(D5,LOW);
  digitalWrite(D6,LOW);
  WiFi.begin(ssid, pass);
  Serial.println("Connecting to N/w ...");
  while(WiFi.status()!=WL_CONNECTED)
  {
    delay(400);
    Serial.println(".");
  }
  Serial.println();
  Serial.println("Connected to N/w");
  Serial.println();
  Serial.println(WiFi.localIP());
  server.begin();       //start the server,to connect to web server and nodemcu
  Blynk.begin(auth, ssid, pass);
  
}

void loop() 
{ 
  Blynk.run();
  WiFiClient client = server.available();   // Listen for incoming clients
  if (client) {                             // If a new client connects,
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();

            // turns the GPIOs on and off
            if (header.indexOf("GET /yellow/on") >= 0) {
              Serial.println("Yellow on");
              output0State = "on";
              digitalWrite(output0, HIGH);
            } else if (header.indexOf("GET /yellow/off") >= 0) {
              Serial.println("Yellow off");
              output0State = "off";
              digitalWrite(output0, LOW);
            } else if (header.indexOf("GET /blue/on") >= 0) {
              Serial.println("Blue on");
              output1State = "on";
              digitalWrite(output1, HIGH);
            } else if (header.indexOf("GET /blue/off") >= 0) {
              Serial.println("Blue off");
              output1State = "off";
              digitalWrite(output1, LOW);
            }
            if (header.indexOf("GET /red/on") >= 0) {
              Serial.println("Red on");
              output2State = "on";
              digitalWrite(output2, HIGH);
            } else if (header.indexOf("GET /red/off") >= 0) {
              Serial.println("Red off");
              output2State = "off";
              digitalWrite(output2, LOW);
            }
            if (header.indexOf("GET /green/on") >= 0) {
              Serial.println("Green on");
              output3State = "on";
              digitalWrite(output3, HIGH);
            } else if (header.indexOf("GET /green/off") >= 0) {
              Serial.println("Green off");
              output3State = "off";
              digitalWrite(output3, LOW);
            }

            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons
            // Feel free to change the background-color and font-size attributes to fit your preferences
            client.println("<style>html { font-family: Helvetica; color:white;display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button { background-color: #195B6A; border: ridge; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #77878A;border: ridge;}");
  client.println("body { background-image: url(\"https://www.wallpapertip.com/wmimgs/193-1932687_abstract-wallpaper-laptop-tumblr-backgrounds.jpg\" ); </style></head>");

            // Web Page Heading
            client.println("<body><h1 style=\"color:black;\">Home Automation Web Server</h1>");
            
            // Display current state, and ON/OFF buttons for GPIO 5
            client.println("<p>Yellow light - State " + output0State + "</p>");
            // If the output0State is off, it displays the ON button
            if (output0State == "off") {
              client.println("<p><a href=\"/yellow/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/yellow/off\"><button class=\"button button2\">OFF</button></a></p>");
            }

            // Display current state, and ON/OFF buttons for GPIO 4
            client.println("<p>Blue light - State " + output1State + "</p>");
            // If the output1State is off, it displays the ON button
            if (output1State == "off") {
              client.println("<p><a href=\"/blue/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/blue/off\"><button class=\"button button2\">OFF</button></a></p>");
            }
            client.println("<p>Red light - State " + output2State + "</p>");
            // If the output0State is off, it displays the ON button
            if (output2State == "off") {
              client.println("<p><a href=\"/red/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/red/off\"><button class=\"button button2\">OFF</button></a></p>");
            }client.println("<p>Green light - State " + output3State + "</p>");
            // If the output0State is off, it displays the ON button
            if (output3State == "off") {
              client.println("<p><a href=\"/green/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/green/off\"><button class=\"button button2\">OFF</button></a></p>");
            }
            client.println("<h3 style=\"color:white;\">Created by-Prakash Singh Yadav</h3></body></html>");

            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}
